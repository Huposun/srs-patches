diff -rNu a/trunk/src/app/srs_app_config_core.hpp b/trunk/src/app/srs_app_config_core.hpp
--- a/trunk/src/app/srs_app_config_core.hpp	1970-01-01 08:00:00.000000000 +0800
+++ b/trunk/src/app/srs_app_config_core.hpp	2017-11-24 17:50:38.142189683 +0800
@@ -0,0 +1,29 @@
+/**
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2013-2017 (hibate)
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in
+ * the Software without restriction, including without limitation the rights to
+ * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+ * the Software, and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef SRS_APP_CONFIG_CORE_HPP
+#define SRS_APP_CONFIG_CORE_HPP
+
+#define SRS_CONFIG_CROSSDOMAIN      "crossdomain"
+
+#endif //SRS_APP_CONFIG_CORE_HPP
diff -rNu a/trunk/src/app/srs_app_config.cpp b/trunk/src/app/srs_app_config.cpp
--- a/trunk/src/app/srs_app_config.cpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_config.cpp	2017-11-21 15:50:28.000000000 +0800
@@ -22,6 +22,7 @@
 */
 
 #include <srs_app_config.hpp>
+#include <srs_app_config_core.hpp>
 
 #include <unistd.h>
 #include <stdio.h>
@@ -1060,8 +1061,19 @@
                 return ret;
             }
         }
-        srs_trace("reload enabled modified http_api success.");
-        
+        srs_trace("reload http api enabled success.");
+
+        if (!srs_directive_equals(old_http_api->get(SRS_CONFIG_CROSSDOMAIN),
+                                  new_http_api->get(SRS_CONFIG_CROSSDOMAIN))) {
+            for (it = subscribes.begin(); it != subscribes.end(); ++it) {
+                ISrsReloadHandler* subscribe = *it;
+                if ((ret = subscribe->on_reload_http_api_crossdomain()) != ERROR_SUCCESS) {
+                    srs_error("notify subscribes http_api crossdomain modified failed. ret=%d", ret);
+                    return ret;
+                }
+            }
+        }
+        srs_trace("reload http api crossdomain success.");
         return ret;
     }
     
@@ -1134,8 +1146,19 @@
                 return ret;
             }
         }
-        srs_trace("reload enabled modified http_stream success.");
-        
+        srs_trace("reload http stream enabled success.");
+
+        if (!srs_directive_equals(old_http_stream->get(SRS_CONFIG_CROSSDOMAIN),
+                                  new_http_stream->get(SRS_CONFIG_CROSSDOMAIN))) {
+            for (it = subscribes.begin(); it != subscribes.end(); ++it) {
+                ISrsReloadHandler* subscribe = *it;
+                if ((ret = subscribe->on_reload_http_stream_crossdomain()) != ERROR_SUCCESS) {
+                    srs_error("notify subscribes http_stream crossdomain nodified failed. ret=%d", ret);
+                    return ret;
+                }
+            }
+        }
+        srs_trace("reload http stream crossdomain success");
         return ret;
     }
     
@@ -1583,7 +1606,7 @@
         SrsConfDirective* conf = get_http_api();
         for (int i = 0; conf && i < (int)conf->directives.size(); i++) {
             string n = conf->at(i)->name;
-            if (n != "enabled" && n != "listen" && n != "crossdomain") {
+            if (n != "enabled" && n != "listen" && n != SRS_CONFIG_CROSSDOMAIN) {
                 ret = ERROR_SYSTEM_CONFIG_INVALID;
                 srs_error("unsupported http_api directive %s, ret=%d", n.c_str(), ret);
                 return ret;
@@ -1594,7 +1617,7 @@
         SrsConfDirective* conf = get_http_stream();
         for (int i = 0; conf && i < (int)conf->directives.size(); i++) {
             string n = conf->at(i)->name;
-            if (n != "enabled" && n != "listen" && n != "dir") {
+            if (n != "enabled" && n != "listen" && n != "dir" && n != SRS_CONFIG_CROSSDOMAIN) {
                 ret = ERROR_SYSTEM_CONFIG_INVALID;
                 srs_error("unsupported http_stream directive %s, ret=%d", n.c_str(), ret);
                 return ret;
@@ -4139,7 +4162,7 @@
         return SRS_CONF_DEFAULT_HTTP_API_CROSSDOMAIN;
     }
     
-    conf = conf->get("crossdomain");
+    conf = conf->get(SRS_CONFIG_CROSSDOMAIN);
     if (!conf || conf->arg0().empty()) {
         return SRS_CONF_DEFAULT_HTTP_API_CROSSDOMAIN;
     }
@@ -4213,6 +4236,23 @@
     return conf->arg0();
 }
 
+bool SrsConfig::get_http_stream_crossdomain()
+{
+    static bool DEFAULT = false;
+
+    SrsConfDirective* conf = get_http_stream();
+    if (!conf) {
+        return DEFAULT;
+    }
+
+    conf = conf->get(SRS_CONFIG_CROSSDOMAIN);
+    if (!conf || conf->arg0().empty()) {
+        return DEFAULT;
+    }
+
+    return SRS_CONF_PERFER_TRUE(conf->arg0());
+}
+
 bool SrsConfig::get_vhost_http_enabled(string vhost)
 {
     SrsConfDirective* vconf = get_vhost(vhost);
diff -rNu a/trunk/src/app/srs_app_config.hpp b/trunk/src/app/srs_app_config.hpp
--- a/trunk/src/app/srs_app_config.hpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_config.hpp	2017-11-21 11:52:36.000000000 +0800
@@ -1041,6 +1041,10 @@
     * get the http stream root dir.
     */
     virtual std::string         get_http_stream_dir();
+    /**
+     * whether enable crossdomain for http static and stream server.
+     */
+    virtual bool                get_http_stream_crossdomain();
 public:
     /**
     * get whether vhost enabled http stream
diff -rNu a/trunk/src/app/srs_app_http_api.cpp b/trunk/src/app/srs_app_http_api.cpp
--- a/trunk/src/app/srs_app_http_api.cpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_http_api.cpp	2017-11-21 12:18:34.000000000 +0800
@@ -857,12 +857,17 @@
 {
     mux = m;
     parser = new SrsHttpParser();
-    crossdomain_required = false;
+    cors = new SrsHttpCorsMux();
+
+    _srs_config->subscribe(this);
 }
 
 SrsHttpApi::~SrsHttpApi()
 {
     srs_freep(parser);
+    srs_freep(cors);
+
+    _srs_config->unsubscribe(this);
 }
 
 void SrsHttpApi::resample()
@@ -894,7 +899,7 @@
     srs_trace("api get peer ip success. ip=%s", ip.c_str());
     
     // initialize parser
-    if ((ret = parser->initialize(HTTP_REQUEST)) != ERROR_SUCCESS) {
+    if ((ret = parser->initialize(HTTP_REQUEST, true)) != ERROR_SUCCESS) {
         srs_error("api initialize http parser failed. ret=%d", ret);
         return ret;
     }
@@ -905,7 +910,13 @@
     // set the recv timeout, for some clients never disconnect the connection.
     // @see https://github.com/ossrs/srs/issues/398
     skt.set_recv_timeout(SRS_HTTP_RECV_TIMEOUT_US);
-    
+
+    // initialize the cors, which whill proxy to mux.
+    bool crossdomain_enabled = _srs_config->get_http_api_crossdomain();
+    if ((ret = cors->initialize(mux, crossdomain_enabled)) != ERROR_SUCCESS) {
+        return ret;
+    }
+
     // process http messages.
     while(!disposed) {
         ISrsHttpMessage* req = NULL;
@@ -948,8 +959,6 @@
 
 int SrsHttpApi::process_request(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) 
 {
-    int ret = ERROR_SUCCESS;
-    
     SrsHttpMessage* hm = dynamic_cast<SrsHttpMessage*>(r);
     srs_assert(hm);
     
@@ -957,37 +966,15 @@
         r->method_str().c_str(), r->url().c_str(), r->content_length(),
         hm->is_chunked(), hm->is_infinite_chunked());
     
-    // method is OPTIONS and enable crossdomain, required crossdomain header.
-    if (r->is_http_options() && _srs_config->get_http_api_crossdomain()) {
-        crossdomain_required = true;
-    }
+    // use cors server mux to serve http request, which will proxy to mux.
+    return cors->serve_http(w, r);
+}
 
-    // whenever crossdomain required, set crossdomain header.
-    if (crossdomain_required) {
-        w->header()->set("Access-Control-Allow-Origin", "*");
-        w->header()->set("Access-Control-Allow-Methods", "GET, POST, HEAD, PUT, DELETE");
-        w->header()->set("Access-Control-Allow-Headers", "Cache-Control,X-Proxy-Authorization,X-Requested-With,Content-Type");
-    }
+int SrsHttpApi::on_reload_http_api_crossdomain() {
+    int ret = ERROR_SUCCESS;
 
-    // handle the http options.
-    if (r->is_http_options()) {
-        w->header()->set_content_length(0);
-        if (_srs_config->get_http_api_crossdomain()) {
-            w->write_header(SRS_CONSTS_HTTP_OK);
-        } else {
-            w->write_header(SRS_CONSTS_HTTP_MethodNotAllowed);
-        }
-        return w->final_request();
-    }
-    
-    // use default server mux to serve http request.
-    if ((ret = mux->serve_http(w, r)) != ERROR_SUCCESS) {
-        if (!srs_is_client_gracefully_close(ret)) {
-            srs_error("serve http msg failed. ret=%d", ret);
-        }
-        return ret;
-    }
-    
+    bool crossdomain_enabled = _srs_config->get_http_api_crossdomain();
+    ret = cors->initialize(mux, crossdomain_enabled);
     return ret;
 }
 
diff -rNu a/trunk/src/app/srs_app_http_api.hpp b/trunk/src/app/srs_app_http_api.hpp
--- a/trunk/src/app/srs_app_http_api.hpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_http_api.hpp	2017-11-21 11:47:12.000000000 +0800
@@ -40,6 +40,7 @@
 #include <srs_app_st.hpp>
 #include <srs_app_conn.hpp>
 #include <srs_http_stack.hpp>
+#include <srs_app_reload.hpp>
 
 // for http root.
 class SrsGoApiRoot : public ISrsHttpHandler
@@ -186,12 +187,12 @@
     virtual int serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);
 };
 
-class SrsHttpApi : public SrsConnection
+class SrsHttpApi : public SrsConnection, public ISrsReloadHandler
 {
 private:
     SrsHttpParser* parser;
     SrsHttpServeMux* mux;
-    bool crossdomain_required;
+    SrsHttpCorsMux* cors;
 public:
     SrsHttpApi(IConnectionManager* cm, st_netfd_t fd, SrsHttpServeMux* m);
     virtual ~SrsHttpApi();
@@ -205,6 +206,9 @@
     virtual int do_cycle();
 private:
     virtual int process_request(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);
+    // interface ISrsReloadHandler
+public:
+    virtual int on_reload_http_api_crossdomain();
 };
 
 #endif
diff -rNu a/trunk/src/app/srs_app_http_client.cpp b/trunk/src/app/srs_app_http_client.cpp
--- a/trunk/src/app/srs_app_http_client.cpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_http_client.cpp	2017-11-21 12:28:46.000000000 +0800
@@ -59,7 +59,7 @@
     srs_freep(parser);
     parser = new SrsHttpParser();
     
-    if ((ret = parser->initialize(HTTP_RESPONSE)) != ERROR_SUCCESS) {
+    if ((ret = parser->initialize(HTTP_RESPONSE, false)) != ERROR_SUCCESS) {
         srs_error("initialize parser failed. ret=%d", ret);
         return ret;
     }
diff -rNu a/trunk/src/app/srs_app_http_conn.cpp b/trunk/src/app/srs_app_http_conn.cpp
--- a/trunk/src/app/srs_app_http_conn.cpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_http_conn.cpp	2017-11-21 12:26:10.000000000 +0800
@@ -525,7 +525,8 @@
     srs_freepa(_http_ts_send_buffer);
 }
 
-int SrsHttpMessage::update(string url, http_parser* header, SrsFastBuffer* body, vector<SrsHttpHeaderField>& headers)
+int SrsHttpMessage::update(string url, bool allow_jsonp, http_parser* header,
+                           SrsFastBuffer* body, vector<SrsHttpHeaderField>& headers)
 {
     int ret = ERROR_SUCCESS;
     
@@ -592,11 +593,13 @@
     }
     
     // parse jsonp request message.
-    if (!query_get("callback").empty()) {
-        jsonp = true;
-    }
-    if (jsonp) {
-        jsonp_method = query_get("method");
+    if (allow_jsonp) {
+        if (!query_get("callback").empty()) {
+            jsonp = true;
+        }
+        if (jsonp) {
+            jsonp_method = query_get("method");
+        }
     }
     
     return ret;
@@ -887,9 +890,11 @@
     srs_freep(buffer);
 }
 
-int SrsHttpParser::initialize(enum http_parser_type type)
+int SrsHttpParser::initialize(enum http_parser_type type, bool allow_jsonp)
 {
     int ret = ERROR_SUCCESS;
+
+    jsonp = allow_jsonp;
     
     memset(&settings, 0, sizeof(settings));
     settings.on_message_begin = on_message_begin;
@@ -935,7 +940,7 @@
     SrsHttpMessage* msg = new SrsHttpMessage(skt, conn);
     
     // initalize http msg, parse url.
-    if ((ret = msg->update(url, &header, buffer, headers)) != ERROR_SUCCESS) {
+    if ((ret = msg->update(url, jsonp, &header, buffer, headers)) != ERROR_SUCCESS) {
         srs_error("initialize http msg failed. ret=%d", ret);
         srs_freep(msg);
         return ret;
@@ -1198,12 +1203,18 @@
     : SrsConnection(cm, fd)
 {
     parser = new SrsHttpParser();
+    cors = new SrsHttpCorsMux();
     http_mux = m;
+
+    _srs_config->subscribe(this);
 }
 
 SrsHttpConn::~SrsHttpConn()
 {
     srs_freep(parser);
+    srs_freep(cors);
+
+    _srs_config->unsubscribe(this);
 }
 
 void SrsHttpConn::resample()
@@ -1233,9 +1244,9 @@
     int ret = ERROR_SUCCESS;
     
     srs_trace("HTTP client ip=%s", ip.c_str());
-    
+
     // initialize parser
-    if ((ret = parser->initialize(HTTP_REQUEST)) != ERROR_SUCCESS) {
+    if ((ret = parser->initialize(HTTP_REQUEST, false)) != ERROR_SUCCESS) {
         srs_error("http initialize http parser failed. ret=%d", ret);
         return ret;
     }
@@ -1246,7 +1257,13 @@
     // set the recv timeout, for some clients never disconnect the connection.
     // @see https://github.com/ossrs/srs/issues/398
     skt.set_recv_timeout(SRS_HTTP_RECV_TIMEOUT_US);
-    
+
+    // initialize the cors, which will proxy to mux.
+    bool crossdomain_enabled = _srs_config->get_http_stream_crossdomain();
+    if ((ret = cors->initialize(http_mux, crossdomain_enabled)) != ERROR_SUCCESS) {
+        return ret;
+    }
+
     // process http messages.
     while (!disposed) {
         ISrsHttpMessage* req = NULL;
@@ -1285,20 +1302,16 @@
 
 int SrsHttpConn::process_request(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) 
 {
-    int ret = ERROR_SUCCESS;
-    
-    srs_trace("HTTP %s %s, content-length=%"PRId64"", 
+    srs_trace("HTTP %s %s, content-length=%"PRId64"",
         r->method_str().c_str(), r->url().c_str(), r->content_length());
     
-    // use default server mux to serve http request.
-    if ((ret = http_mux->serve_http(w, r)) != ERROR_SUCCESS) {
-        if (!srs_is_client_gracefully_close(ret)) {
-            srs_error("serve http msg failed. ret=%d", ret);
-        }
-        return ret;
-    }
-    
-    return ret;
+    // use cors server mux to serve http request, which will proxy to http_mux.
+    return cors->serve_http(w, r);
+}
+
+int SrsHttpConn::on_reload_http_stream_crossdomain() {
+    bool crossdomain_enabled = _srs_config->get_http_stream_crossdomain();
+    return cors->initialize(http_mux, crossdomain_enabled);
 }
 
 SrsResponseOnlyHttpConn::SrsResponseOnlyHttpConn(IConnectionManager* cm, st_netfd_t fd, ISrsHttpServeMux* m)
diff -rNu a/trunk/src/app/srs_app_http_conn.hpp b/trunk/src/app/srs_app_http_conn.hpp
--- a/trunk/src/app/srs_app_http_conn.hpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_http_conn.hpp	2017-11-21 12:23:38.000000000 +0800
@@ -47,6 +47,7 @@
 #include <srs_app_thread.hpp>
 #include <srs_app_conn.hpp>
 #include <srs_app_source.hpp>
+#include <srs_app_reload.hpp>
 
 class SrsServer;
 class SrsSource;
@@ -215,7 +216,7 @@
     /**
      * set the original messages, then update the message.
      */
-    virtual int update(std::string url, http_parser* header,
+    virtual int update(std::string url, bool allow_jsonp, http_parser* header,
         SrsFastBuffer* body, std::vector<SrsHttpHeaderField>& headers
     );
 public:
@@ -312,6 +313,8 @@
     http_parser parser;
     // the global parse buffer.
     SrsFastBuffer* buffer;
+    // whether allow jsonp parser.
+    bool jsonp;
 private:
     // http parse data, reset before parse message.
     bool expect_field_name;
@@ -329,8 +332,9 @@
     /**
      * initialize the http parser with specified type,
      * one parser can only parse request or response messages.
+     * @param allow_jsonp whether allow jsonp parser, which indicates the method in query string.
      */
-    virtual int initialize(enum http_parser_type type);
+    virtual int initialize(enum http_parser_type type, bool allow_jsonp);
     /**
      * always parse a http message,
      * that is, the *ppmsg always NOT-NULL when return success.
@@ -388,11 +392,12 @@
     virtual std::string get_uri_field(std::string uri, http_parser_url* hp_u, http_parser_url_fields field);
 };
 
-class SrsHttpConn : public SrsConnection
+class SrsHttpConn : public SrsConnection, public ISrsReloadHandler
 {
 protected:
     SrsHttpParser* parser;
     ISrsHttpServeMux* http_mux;
+    SrsHttpCorsMux* cors;
 public:
     SrsHttpConn(IConnectionManager* cm, st_netfd_t fd, ISrsHttpServeMux* m);
     virtual ~SrsHttpConn();
@@ -411,6 +416,9 @@
     virtual int on_got_http_message(ISrsHttpMessage* msg) = 0;
 private:
     virtual int process_request(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);
+// interface ISrsReloadHandler
+public:
+    virtual int on_reload_http_stream_crossdomain();
 };
 
 /**
diff -rNu a/trunk/src/app/srs_app_reload.cpp b/trunk/src/app/srs_app_reload.cpp
--- a/trunk/src/app/srs_app_reload.cpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_reload.cpp	2017-11-21 12:22:50.000000000 +0800
@@ -85,6 +85,11 @@
     return ERROR_SUCCESS;
 }
 
+int ISrsReloadHandler::on_reload_http_api_crossdomain()
+{
+    return ERROR_SUCCESS;
+}
+
 int ISrsReloadHandler::on_reload_http_stream_enabled()
 {
     return ERROR_SUCCESS;
@@ -100,6 +105,10 @@
     return ERROR_SUCCESS;
 }
 
+int ISrsReloadHandler::on_reload_http_stream_crossdomain() {
+    return ERROR_SUCCESS;
+}
+
 int ISrsReloadHandler::on_reload_vhost_http_updated()
 {
     return ERROR_SUCCESS;
diff -rNu a/trunk/src/app/srs_app_reload.hpp b/trunk/src/app/srs_app_reload.hpp
--- a/trunk/src/app/srs_app_reload.hpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/app/srs_app_reload.hpp	2017-11-21 12:22:28.000000000 +0800
@@ -54,9 +54,11 @@
     virtual int on_reload_pithy_print();
     virtual int on_reload_http_api_enabled();
     virtual int on_reload_http_api_disabled();
+    virtual int on_reload_http_api_crossdomain();
     virtual int on_reload_http_stream_enabled();
     virtual int on_reload_http_stream_disabled();
     virtual int on_reload_http_stream_updated();
+    virtual int on_reload_http_stream_crossdomain();
 public:
     // TODO: FIXME: should rename to http_static
     virtual int on_reload_vhost_http_updated();
diff -rNu a/trunk/src/protocol/srs_http_consts.hpp b/trunk/src/protocol/srs_http_consts.hpp
--- a/trunk/src/protocol/srs_http_consts.hpp	1970-01-01 08:00:00.000000000 +0800
+++ b/trunk/src/protocol/srs_http_consts.hpp	2017-11-21 11:32:02.000000000 +0800
@@ -0,0 +1,121 @@
+﻿/**
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2013-2017 (hibate)
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in
+ * the Software without restriction, including without limitation the rights to
+ * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+ * the Software, and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef SRS_PROTOCOL_HTTP_CONSTS_HPP
+#define SRS_PROTOCOL_HTTP_CONSTS_HPP
+
+#define HTTP_HEADER_CACHE_CONTROL                           "Cache-Control"
+#define HTTP_HEADER_CONTENT_LENGTH                          "Content-Length"
+#define HTTP_HEADER_CONTENT_TYPE                            "Content-Type"
+#define HTTP_HEADER_DATE                                    "Date"
+#define HTTP_HEADER_PRAGMA                                  "Pragma"
+#define HTTP_HEADER_VIA                                     "Via"
+#define HTTP_HEADER_WARNING                                 "Warning"
+#define HTTP_HEADER_ACCEPT                                  "Accept"
+#define HTTP_HEADER_ACCEPT_CHARSET                          "Accept-Charset"
+#define HTTP_HEADER_ACCEPT_ENCODING                         "Accept-Encoding"
+#define HTTP_HEADER_ACCEPT_LANGUAGE                         "Accept-Language"
+#define HTTP_HEADER_ACCESS_CONTROL_REQUEST_HEADERS          "Access-Control-Request-Headers"
+#define HTTP_HEADER_ACCESS_CONTROL_REQUEST_METHOD           "Access-Control-Request-Method"
+#define HTTP_HEADER_AUTHORIZATION                           "Authorization"
+#define HTTP_HEADER_CONNECTION                              "Connection"
+#define HTTP_HEADER_COOKIE                                  "Cookie"
+#define HTTP_HEADER_EXPECT                                  "Expect"
+#define HTTP_HEADER_FROM                                    "From"
+#define HTTP_HEADER_FORWARDED                               "Forwarded"
+#define HTTP_HEADER_FOLLOW_ONLY_WHEN_PRERENDER_SHOWN        "Follow-Only-When-Prerender-Shown"
+#define HTTP_HEADER_HOST                                    "Host"
+#define HTTP_HEADER_IF_MATCH                                "If-Match"
+#define HTTP_HEADER_IF_MODIFIED_SINCE                       "If-Modified-Since"
+#define HTTP_HEADER_IF_NONE_MATCH                           "If-None-Match"
+#define HTTP_HEADER_IF_RANGE                                "If-Range"
+#define HTTP_HEADER_IF_UNMODIFIED_SINCE                     "If-Unmodified-Since"
+#define HTTP_HEADER_LAST_EVENT_ID                           "Last-Event-ID"
+#define HTTP_HEADER_MAX_FORWARDS                            "Max-Forwards"
+#define HTTP_HEADER_ORIGIN                                  "Origin"
+#define HTTP_HEADER_PROXY_AUTHORIZATION                     "Proxy-Authorization"
+#define HTTP_HEADER_RANGE                                   "Range"
+#define HTTP_HEADER_REFERER                                 "Referer"
+#define HTTP_HEADER_SERVICE_WORKER                          "Service-Worker"
+#define HTTP_HEADER_TE                                      "TE"
+#define HTTP_HEADER_UPGRADE                                 "Upgrade"
+#define HTTP_HEADER_USER_AGENT                              "User-Agent"
+#define HTTP_HEADER_ACCEPT_RANGES                           "Accept-Ranges"
+#define HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS            "Access-Control-Allow-Headers"
+#define HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS            "Access-Control-Allow-Methods"
+#define HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN             "Access-Control-Allow-Origin"
+#define HTTP_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS        "Access-Control-Allow-Credentials"
+#define HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS           "Access-Control-Expose-Headers"
+#define HTTP_HEADER_ACCESS_CONTROL_MAX_AGE                  "Access-Control-Max-Age"
+#define HTTP_HEADER_AGE                                     "Age"
+#define HTTP_HEADER_ALLOW                                   "Allow"
+#define HTTP_HEADER_CONTENT_DISPOSITION                     "Content-Disposition"
+#define HTTP_HEADER_CONTENT_ENCODING                        "Content-Encoding"
+#define HTTP_HEADER_CONTENT_LANGUAGE                        "Content-Language"
+#define HTTP_HEADER_CONTENT_LOCATION                        "Content-Location"
+#define HTTP_HEADER_CONTENT_MD5                             "Content-MD5"
+#define HTTP_HEADER_CONTENT_RANGE                           "Content-Range"
+#define HTTP_HEADER_CONTENT_SECURITY_POLICY                 "Content-Security-Policy"
+#define HTTP_HEADER_CONTENT_SECURITY_POLICY_REPORT_ONLY     "Content-Security-Policy-Report-Only"
+#define HTTP_HEADER_X_CONTENT_SECURITY_POLICY               "X-Content-Security-Policy"
+#define HTTP_HEADER_X_CONTENT_SECURITY_POLICY_REPORT_ONLY   "X-Content-Security-Policy-Report-Only"
+#define HTTP_HEADER_X_WEBKIT_CSP                            "X-WebKit-CSP"
+#define HTTP_HEADER_X_WEBKIT_CSP_REPORT_ONLY                "X-WebKit-CSP-Report-Only"
+#define HTTP_HEADER_ETAG                                    "ETag"
+#define HTTP_HEADER_EXPIRES                                 "Expires"
+#define HTTP_HEADER_LAST_MODIFIED                           "Last-Modified"
+#define HTTP_HEADER_LINK                                    "Link"
+#define HTTP_HEADER_LOCATION                                "Location"
+#define HTTP_HEADER_P3P                                     "P3P"
+#define HTTP_HEADER_PROXY_AUTHENTICATE                      "Proxy-Authenticate"
+#define HTTP_HEADER_REFRESH                                 "Refresh"
+#define HTTP_HEADER_RETRY_AFTER                             "Retry-After"
+#define HTTP_HEADER_SERVER                                  "Server"
+#define HTTP_HEADER_SERVICE_WORKER_ALLOWED                  "Service-Worker-Allowed"
+#define HTTP_HEADER_SET_COOKIE                              "Set-Cookie"
+#define HTTP_HEADER_SET_COOKIE2                             "Set-Cookie2"
+#define HTTP_HEADER_STRICT_TRANSPORT_SECURITY               "Strict-Transport-Security"
+#define HTTP_HEADER_TIMING_ALLOW_ORIGIN                     "Timing-Allow-Origin"
+#define HTTP_HEADER_TRAILER                                 "Trailer"
+#define HTTP_HEADER_TRANSFER_ENCODING                       "Transfer-Encoding"
+#define HTTP_HEADER_VARY                                    "Vary"
+#define HTTP_HEADER_WWW_AUTHENTICATE                        "WWW-Authenticate"
+#define HTTP_HEADER_DNT                                     "DNT"
+#define HTTP_HEADER_X_CONTENT_TYPE_OPTIONS                  "X-Content-Type-Options"
+#define HTTP_HEADER_X_DO_NOT_TRACK                          "X-Do-Not-Track"
+#define HTTP_HEADER_X_FORWARDED_FOR                         "X-Forwarded-For"
+#define HTTP_HEADER_X_FORWARDED_PROTO                       "X-Forwarded-Proto"
+#define HTTP_HEADER_X_FORWARDED_HOST                        "X-Forwarded-Host"
+#define HTTP_HEADER_X_FORWARDED_PORT                        "X-Forwarded-Port"
+#define HTTP_HEADER_X_FRAME_OPTIONS                         "X-Frame-Options"
+#define HTTP_HEADER_X_POWERED_BY                            "X-Powered-By"
+#define HTTP_HEADER_PUBLIC_KEY_PINS                         "Public-Key-Pins"
+#define HTTP_HEADER_PUBLIC_KEY_PINS_REPORT_ONLY             "Public-Key-Pins-Report-Only"
+#define HTTP_HEADER_X_REQUESTED_WITH                        "X-Requested-With"
+#define HTTP_HEADER_X_USER_IP                               "X-User-IP"
+#define HTTP_HEADER_X_XSS_PROTECTION                        "X-XSS-Protection"
+#define HTTP_HEADER_X_DNS_PREFETCH_CONTROL                  "X-DNS-Prefetch-Control"
+#define HTTP_HEADER_PING_FROM                               "Ping-From"
+#define HTTP_HEADER_PING_TO                                 "Ping-To"
+
+#endif
diff -rNu a/trunk/src/protocol/srs_http_stack.cpp b/trunk/src/protocol/srs_http_stack.cpp
--- a/trunk/src/protocol/srs_http_stack.cpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/protocol/srs_http_stack.cpp	2017-11-21 11:31:42.000000000 +0800
@@ -35,6 +35,7 @@
 #include <srs_kernel_utility.hpp>
 #include <srs_kernel_file.hpp>
 #include <srs_protocol_json.hpp>
+#include <srs_http_consts.hpp>
 
 #define SRS_HTTP_DEFAULT_PAGE "index.html"
 
@@ -767,6 +768,66 @@
     return false;
 }
 
+SrsHttpCorsMux::SrsHttpCorsMux()
+{
+    next = NULL;
+    enabled = false;
+}
+
+SrsHttpCorsMux::~SrsHttpCorsMux()
+{
+}
+
+int SrsHttpCorsMux::initialize(ISrsHttpServeMux * worker, bool cros_enabled)
+{
+    next = worker;
+    enabled = cros_enabled;
+
+    return ERROR_SUCCESS;
+}
+
+int SrsHttpCorsMux::serve_http(ISrsHttpResponseWriter * w, ISrsHttpMessage * r)
+{
+    int ret = ERROR_SUCCESS;
+    const char* origin = NULL;
+
+    // If CORS enabled, and there is a "Origin" header, it's CORS;
+    if (enabled) {
+        for (int i = 0; i < r->request_header_count(); i++) {
+            string k = r->request_header_key_at(i);
+            if ("Origin" == k || "origin" == k) {
+                origin = r->request_header_value_at(i).c_str();
+                break;
+            }
+        }
+    }
+
+    // When CORS required, set the CORS headers.
+    if (NULL != origin) {
+        SrsHttpHeader* h = w->header();
+        h->set(HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, origin);
+        h->set(HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS, "GET, POST, HEAD, PUT, DELETE, OPTIONS");
+        h->set(HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS, "Server,range,Content-Length,Content-Range");
+        h->set(HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS,
+               "origin,range,accept-encoding,referer,Cache-Control,X-Proxy-Authorization,X-Requested-With,Content-Type");
+    }
+
+    // handle the http options;
+    if (r->is_http_options()) {
+        w->header()->set_content_length(0);
+        if (enabled) {
+            w->write_header(SRS_CONSTS_HTTP_OK);
+        } else {
+            w->write_header(SRS_CONSTS_HTTP_MethodNotAllowed);
+        }
+        if ((ret = w->final_request()) != ERROR_SUCCESS) {
+            return ret;
+        }
+    }
+
+    return (NULL == next) ? ret : next->serve_http(w, r);
+}
+
 ISrsHttpMessage::ISrsHttpMessage()
 {
     _http_ts_send_buffer = new char[SRS_HTTP_TS_SEND_BUFFER_SIZE];
diff -rNu a/trunk/src/protocol/srs_http_stack.hpp b/trunk/src/protocol/srs_http_stack.hpp
--- a/trunk/src/protocol/srs_http_stack.hpp	2017-06-10 08:59:14.000000000 +0800
+++ b/trunk/src/protocol/srs_http_stack.hpp	2017-11-20 18:26:28.000000000 +0800
@@ -442,6 +442,25 @@
     virtual bool path_match(std::string pattern, std::string path);
 };
 
+/**
+ * The filter http mux, directly serve the http CORS requests,
+ * while proxy to the worker mux for services.
+ */
+class SrsHttpCorsMux : public ISrsHttpServeMux
+{
+private:
+    bool enabled;
+    ISrsHttpServeMux* next;
+public:
+    SrsHttpCorsMux();
+    virtual ~SrsHttpCorsMux();
+public:
+    virtual int initialize(ISrsHttpServeMux* worker, bool cros_enabled);
+// interface ISrsHttpServeMux
+public:
+    virtual int serve_http(ISrsHttpResponseWriter * w, ISrsHttpMessage * r);
+};
+
 // for http header.
 typedef std::pair<std::string, std::string> SrsHttpHeaderField;
 
